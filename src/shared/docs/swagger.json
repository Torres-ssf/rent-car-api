{
  "openapi": "3.0.3",
  "info": {
    "title": "Rent Car API",
    "version": "1.0.0"
  },
  "paths": {
    "/user": {
      "post": {
        "tags": ["User"],
        "summary": "Create new user",
        "description": "Create a new user into the server",
        "requestBody": {
          "description": "Body with params to create user object. All 4 params: name, email, password, and driver_license are required",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/createUserBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/UserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error while creating new user",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/definitions/Error"
                    },
                    {
                      "$ref": "#/definitions/ErrorParam"
                    }
                  ]
                },
                "examples": {
                  "existentUser": {
                    "value": {
                      "message": "Email already taken",
                      "error": "Bad Request"
                    },
                    "summary": "Email already in use by another user"
                  },
                  "existentLicense": {
                    "value": {
                      "message": "Driver license already being used by another user",
                      "error": "Bad Request"
                    },
                    "summary": "Driver license already in use"
                  },
                  "paramError": {
                    "value": {
                      "message": [
                        "name should not be empty",
                        "email must be an email",
                        "Password should have at least one number, one lower letter, one upper letter and no empty spaces",
                        "password must be longer than or equal to 8 characters",
                        "driver_license should not be empty"
                      ],
                      "error": "Bad Request"
                    },
                    "summary": "Param validation error"
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/user/avatar": {
      "patch": {
        "tags": ["User"],
        "summary": "Update user avatar",
        "description": "Create a new user avatar or updates to a new one",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Avatar image to be upload.",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "avatar": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": ["avatar"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/UserResponse"
                }
              }
            }
          },
          "401": {
            "allOf": [
              {
                "$ref": "#/components/responses/Unauthorized"
              },
              {
                "$ref": "#/components/responses/UnauthorizedUser"
              }
            ]
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/session/signin": {
      "post": {
        "tags": ["Session"],
        "summary": "Create new session",
        "description": "It is through this endpoint that users get authentication",
        "requestBody": {
          "description": "Body params to create a new session. All 2 params: email, and password are required",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "john@email.com"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "example": "aA123423"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Session created. The receiving data has information about the logged user and the authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/definitions/UserResponse"
                    },
                    "token": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE2MTkyODI3ODksImV4cCI6MTYxOTI4NjM4OSwic3ViIjoiZjRlY2Y5OTItZDExYS00NjNjLTk4MzAtMThiNDRlYmU4NDkxIn0.jWfXgm-_wiCqYpRyEVWTyxQ-xZhG3Pb9s0mxcyQWp_Y"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, wrong user/password combination",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/Error"
                },
                "example": {
                  "message": "wrong email/password combination",
                  "error": "Unauthorized"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/car": {
      "post": {
        "tags": ["Car"],
        "summary": "Create new car",
        "description": "Create a new car into the server",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Body with params to create user object. All 4 params: name, email, password, and driver_license are required",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/createCarBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created car",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Car"
                }
              }
            }
          },
          "400": {
            "description": "Error while creating new car",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/definitions/Error"
                    },
                    {
                      "$ref": "#/definitions/ErrorParam"
                    }
                  ]
                },
                "examples": {
                  "existentLicense": {
                    "value": {
                      "message": "License plate already in use",
                      "error": "Bad Request"
                    },
                    "summary": "License plate already exists"
                  },
                  "nonexistentCategory": {
                    "value": {
                      "message": "Category does not exists",
                      "error": "Bad Request"
                    },
                    "summary": "Category does not exists"
                  },
                  "paramError": {
                    "value": {
                      "message": [
                        "model should not be empty",
                        "brand should not be empty",
                        "max_speed must be a number conforming to the specified constraints",
                        "max_speed must be a positive number",
                        "horse_power must be a number conforming to the specified constraints",
                        "horse_power must be a positive number",
                        "zero_to_one_hundred must be a number conforming to the specified constraints",
                        "zero_to_one_hundred must be a positive number",
                        "daily_value must be a number conforming to the specified constraints",
                        "daily_value must be a positive number",
                        "license_plate should not be empty",
                        "fine_amount must be a number conforming to the specified constraints",
                        "fine_amount must be a positive number",
                        "category_id must be a UUID"
                      ],
                      "error": "Bad Request"
                    },
                    "summary": "Param validation error"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/car/available": {
      "get": {
        "tags": ["Car"],
        "summary": "List available cars",
        "description": "List all available car saved into the database. This request accepts 3 optional query params to fetch cars based at model, brand, and category id.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "model",
            "in": "query",
            "description": "Optional param for car model",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "brand",
            "in": "query",
            "description": "Optional param for car brand",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "category_id",
            "in": "query",
            "description": "Optional param for category id",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List all available cars",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Car"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/car/{id}/add-specification": {
      "post": {
        "tags": ["Car"],
        "summary": "Add specification to car",
        "description": "Add an existent specification to an existent car",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Car id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Body with param to add specifications to car. The specifications_ids array is required",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "specifications_ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The car with the added specification(s)",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Car"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "specifications": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Specification"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Error while adding specification to car",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/definitions/Error"
                    },
                    {
                      "$ref": "#/definitions/ErrorParam"
                    }
                  ]
                },
                "examples": {
                  "nonexistentCar": {
                    "value": {
                      "message": "No car found for the given car id",
                      "error": "Bad Request"
                    },
                    "summary": "No car found for the given car id"
                  },
                  "specNotFound": {
                    "value": {
                      "message": "No specifications were found for the given ids",
                      "error": "Bad Request"
                    },
                    "summary": "No specifications found"
                  },
                  "oneOrMoreSpecNotFound": {
                    "value": {
                      "message": "One or more specifications were not found for the given ids",
                      "error": "Bad Request"
                    },
                    "summary": "One or more specifications were not found"
                  },
                  "carAlreadyHaveSpec": {
                    "value": {
                      "message": "Car already have specification ${specification.name}",
                      "error": "Bad Request"
                    },
                    "summary": "Car already have specification"
                  },
                  "paramError": {
                    "value": {
                      "message": [
                        "each value in specifications_ids must be a UUID"
                      ],
                      "error": "Bad Request"
                    },
                    "summary": "Param validation error"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/rental/{car_id}": {
      "post": {
        "tags": ["Rental"],
        "summary": "Create rental data",
        "description": "Create rental data into the serve. In other words, this endpoint is used for users to rent cars.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "car_id",
            "in": "path",
            "description": "Id from the car to be rented",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Body with params to create rental data. All 2 params: start_date, and expected_return_date are required.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "start_date": {
                    "type": "string",
                    "format": "date",
                    "example": "2021-04-17T13:46:15.615Z"
                  },
                  "expected_return_date": {
                    "type": "string",
                    "format": "date",
                    "example": "2021-04-20T13:46:15.615Z"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created rental data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rental"
                }
              }
            }
          },
          "400": {
            "description": "Error while creating new rental data",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/definitions/Error"
                    },
                    {
                      "$ref": "#/definitions/ErrorParam"
                    }
                  ]
                },
                "examples": {
                  "openRental": {
                    "value": {
                      "message": "There is an open rental for the given user",
                      "error": "Bad Request"
                    },
                    "summary": "User has an open rent on going"
                  },
                  "noCarFound": {
                    "value": {
                      "message": "No car found for the given id",
                      "error": "Bad Request"
                    },
                    "summary": "No car found for the id"
                  },
                  "carNotAvailable": {
                    "value": {
                      "message": "Car is not available",
                      "error": "Bad Request"
                    },
                    "summary": "Car is not available"
                  },
                  "startDateOnPast": {
                    "value": {
                      "message": "Start date cannot be a past date",
                      "error": "Bad Request"
                    },
                    "summary": "Start date cannot be a past date"
                  },
                  "startDateOnFuture": {
                    "value": {
                      "message": "Start date cannot be a future date",
                      "error": "Bad Request"
                    },
                    "summary": "Start date cannot be a future date"
                  },
                  "returnDateOnFuture": {
                    "value": {
                      "message": "Return date cannot be a past date",
                      "error": "Bad Request"
                    },
                    "summary": "Return date cannot be a past date"
                  },
                  "datesSameDay": {
                    "value": {
                      "message": "Return date cannot be at the same day as the start date",
                      "error": "Bad Request"
                    },
                    "summary": "Dates cannot be at the same day"
                  },
                  "paramError": {
                    "value": {
                      "message": [
                        "start_date must be a date string",
                        "expected_return_date must be a date string"
                      ],
                      "error": "Bad Request"
                    },
                    "summary": "Param validation error"
                  }
                }
              }
            }
          },
          "401": {
            "allOf": [
              {
                "$ref": "#/components/responses/Unauthorized"
              },
              {
                "$ref": "#/components/responses/UnauthorizedUser"
              }
            ]
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/category": {
      "post": {
        "tags": ["Category"],
        "summary": "Create new category",
        "description": "Create a new category into the server. This endpoint is exclusive for admins",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Body params to create category object. All 2 params: name, and description are required",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/createCategory"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created category",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "400": {
            "description": "Error while creating new category",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/definitions/Error"
                    },
                    {
                      "$ref": "#/definitions/ErrorParam"
                    }
                  ]
                },
                "examples": {
                  "existentCategory": {
                    "value": {
                      "message": "Category with name ${name} already exists",
                      "error": "Bad Request"
                    },
                    "summary": "Category already exists"
                  },
                  "paramError": {
                    "value": {
                      "message": [
                        "name should not be empty",
                        "description should not be empty"
                      ],
                      "error": "Bad Request"
                    },
                    "summary": "Param validation error"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "get": {
        "tags": ["Category"],
        "summary": "List categories",
        "description": "List all categories saved into the database.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List all created categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Category"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/specification": {
      "post": {
        "tags": ["Specification"],
        "summary": "Create new specification",
        "description": "Create a new specification into the server. This endpoint is exclusive for admins",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Body params to create specification object. All 2 params: name, and description are required",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/createCategory"
              },
              "example": {
                "name": "Electric Car",
                "description": "An electric car is a car which is propelled by one or more electric motors."
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created specification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Specification"
                }
              }
            }
          },
          "400": {
            "description": "Error while creating new specification",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/definitions/Error"
                    },
                    {
                      "$ref": "#/definitions/ErrorParam"
                    }
                  ]
                },
                "examples": {
                  "existentCategory": {
                    "value": {
                      "message": "Specification with name ${name} already exists",
                      "error": "Bad Request"
                    },
                    "summary": "Specification already exists"
                  },
                  "paramError": {
                    "value": {
                      "message": [
                        "name should not be empty",
                        "description should not be empty"
                      ],
                      "error": "Bad Request"
                    },
                    "summary": "Param validation error"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "get": {
        "tags": ["Specification"],
        "summary": "List specification",
        "description": "List all specification saved into the database.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List all created specification",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Specification"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "driver_license": {
            "type": "string"
          },
          "password": {
            "type": "string",
            "format": "password"
          },
          "avatar": {
            "type": "string",
            "nullable": true,
            "example": "my-avatar.jpeg"
          },
          "admin": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date",
            "example": "2021-04-17T13:46:15.615Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date",
            "example": "2021-04-17T13:46:15.615Z"
          }
        }
      },
      "Car": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "model": {
            "type": "string",
            "example": "Enzo"
          },
          "brand": {
            "type": "string",
            "example": "Ferrari"
          },
          "max_speed": {
            "type": "number",
            "format": "float",
            "example": 360.5
          },
          "horse_power": {
            "type": "number",
            "format": "float",
            "example": 780
          },
          "zero_to_one_hundred": {
            "type": "number",
            "format": "float",
            "example": 3.4
          },
          "license_plate": {
            "type": "string",
            "example": "MSH-3746"
          },
          "daily_value": {
            "type": "number",
            "format": "float",
            "example": 250
          },
          "fine_amount": {
            "type": "number",
            "format": "float",
            "example": 50
          },
          "available": {
            "type": "boolean"
          },
          "category_id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date",
            "example": "2021-04-17T13:46:15.615Z"
          }
        }
      },
      "Rental": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "car_id": {
            "type": "string",
            "format": "uuid"
          },
          "user_id": {
            "type": "string",
            "format": "uuid"
          },
          "start_date": {
            "type": "string",
            "format": "date",
            "example": "2021-04-17T13:46:15.615Z"
          },
          "expected_return_date": {
            "type": "string",
            "format": "date",
            "example": "2021-04-17T13:46:15.615Z"
          },
          "returned_date": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "example": null
          },
          "status": {
            "type": "string",
            "enum": ["OPEN", "CLOSE"],
            "example": "OPEN"
          },
          "car_daily_value": {
            "type": "number",
            "format": "float",
            "example": 250
          },
          "car_daily_fine": {
            "type": "number",
            "format": "float",
            "example": 50
          },
          "estimated_total": {
            "type": "number",
            "format": "float",
            "example": 1100.50
          },
          "total": {
            "type": "number",
            "format": "float",
            "nullable": true,
            "example": null
          },
          "created_at": {
            "type": "string",
            "format": "date",
            "example": "2021-04-17T13:46:15.615Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date",
            "example": "2021-04-17T13:46:15.615Z"
          }
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "example": "Sedan"
          },
          "description": {
            "type": "string",
            "example": "A sedan has four doors and a traditional trunk."
          },
          "created_at": {
            "type": "string",
            "format": "date",
            "example": "2021-04-17T13:46:15.615Z"
          }
        }
      },
      "Specification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "example": "Electric Engine."
          },
          "description": {
            "type": "string",
            "example": "An electric car is a car which is propelled by one or more electric motors."
          },
          "created_at": {
            "type": "string",
            "format": "date",
            "example": "2021-04-17T13:46:15.615Z"
          }
        }
      }
    },
    "requestBodies": {
      "createCategory": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Sedan"
          },
          "description": {
            "type": "string",
            "example": "A sedan has four doors and a traditional trunk."
          }
        }
      },
      "createUserBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john@email.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": ".aA1234567"
          },
          "driver_license": {
            "type": "string",
            "example": "312412341"
          }
        }
      },
      "createCarBody": {
        "type": "object",
        "properties": {
          "model": {
            "type": "string",
            "example": "Enzo"
          },
          "brand": {
            "type": "string",
            "example": "Ferrari"
          },
          "license_plate": {
            "type": "string",
            "example": "MSH-3746"
          },
          "max_speed": {
            "type": "number",
            "format": "float",
            "example": 360.5
          },
          "horse_power": {
            "type": "number",
            "format": "float",
            "example": 780
          },
          "zero_to_one_hundred": {
            "type": "number",
            "format": "float",
            "example": 3.4
          },
          "daily_value": {
            "type": "number",
            "format": "float",
            "example": 250
          },
          "fine_amount": {
            "type": "number",
            "format": "float",
            "example": 50
          },
          "category_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      }
    },
    "responses": {
      "Unauthorized": {
        "description": "Unauthorized, either missing the auth token or an invalid token",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "missingToken": {
                "value": {
                  "message": "JWT token is missing",
                  "error": "Unauthorized"
                },
                "summary": "JWT token not provided"
              },
              "invalidToken": {
                "value": {
                  "message": "Invalid JWT token",
                  "error": "Unauthorized"
                },
                "summary": "Invalid JWT token"
              }
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden, user needs to be an admin",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "example": {
              "message": "An admin is required for this operation",
              "error": "Forbidden"
            }
          }
        }
      },
      "UnauthorizedUser": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "noUserFound": {
                "value": {
                  "message": "No user was found for the given id",
                  "error": "Unauthorized"
                },
                "summary": "No user found for the given id"
              }
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "example": {
              "message": "${error.message}",
              "error": "Internal Server Error"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "definitions": {
    "UserResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string",
          "example": "John Doe"
        },
        "email": {
          "type": "string",
          "format": "email",
          "example": "john@email.com"
        },
        "driver_license": {
          "type": "string",
          "example": "8456456"
        },
        "avatar": {
          "type": "string",
          "nullable": true,
          "example": null
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "error": {
          "type": "string"
        }
      }
    },
    "ErrorParam": {
      "type": "object",
      "properties": {
        "message": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "error": {
          "type": "string"
        }
      }
    }
  }
}
