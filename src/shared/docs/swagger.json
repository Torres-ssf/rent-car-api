{
  "openapi": "3.0.3",
  "info": {
    "title": "Rent Car API",
    "version": "1.0.0"
  },
  "paths": {
    "/user": {
      "post": {
        "tags": ["User"],
        "summary": "Create new user",
        "description": "Create a new user into the server",
        "requestBody": {
          "description": "Body with params to create user object. All 4 params: name, email, password, and driver_license are required",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/createUserBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/UserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error while creating new user",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/definitions/Error"
                    },
                    {
                      "$ref": "#/definitions/ErrorParam"
                    }
                  ]
                },
                "examples": {
                  "existentUser": {
                    "value": {
                      "message": "Email already taken",
                      "error": "Bad Request"
                    },
                    "summary": "Email already in use by another user"
                  },
                  "existentLicense": {
                    "value": {
                      "message": "Driver license already being used by another user",
                      "error": "Bad Request"
                    },
                    "summary": "Driver license already in use"
                  },
                  "paramError": {
                    "value": {
                      "message": [
                        "name should not be empty",
                        "email must be an email",
                        "Password should have at least one number, one lower letter, one upper letter and no empty spaces",
                        "password must be longer than or equal to 8 characters",
                        "driver_license should not be empty"
                      ],
                      "error": "Bad Request"
                    },
                    "summary": "Param validation error"
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/user/avatar": {
      "patch": {
        "tags": ["User"],
        "summary": "Update user avatar",
        "description": "Create a new user avatar or updates to a new one",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Avatar image to be upload.",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "avatar": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": ["avatar"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/UserResponse"
                }
              }
            }
          },
          "401": {
            "allOf": [
              {
                "$ref": "#/components/responses/Unauthorized"
              },
              {
                "$ref": "#/components/responses/UnauthorizedUser"
              }
            ]
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/session/signin": {
      "post": {
        "tags": ["Session"],
        "summary": "Create new session",
        "description": "It is through this endpoint that users get authentication",
        "requestBody": {
          "description": "Body params to create a new session. All 2 params: email, and password are required",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "john@email.com"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "example": "aA123423"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Session created. The receiving data has information about the logged user and the authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/definitions/UserResponse"
                    },
                    "token": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE2MTkyODI3ODksImV4cCI6MTYxOTI4NjM4OSwic3ViIjoiZjRlY2Y5OTItZDExYS00NjNjLTk4MzAtMThiNDRlYmU4NDkxIn0.jWfXgm-_wiCqYpRyEVWTyxQ-xZhG3Pb9s0mxcyQWp_Y"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, wrong user/password combination",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/Error"
                },
                "example": {
                  "message": "wrong email/password combination",
                  "error": "Unauthorized"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/category": {
      "post": {
        "tags": ["Category"],
        "summary": "Create new category",
        "description": "Create a new category into the server. This endpoint is exclusive for admins",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Body params to create category object. All 2 params: name, and description are required",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/createCategory"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created category",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "400": {
            "description": "Error while creating new category",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/definitions/Error"
                    },
                    {
                      "$ref": "#/definitions/ErrorParam"
                    }
                  ]
                },
                "examples": {
                  "existentCategory": {
                    "value": {
                      "message": "Category with name ${name} already exists",
                      "error": "Bad Request"
                    },
                    "summary": "Category already exists"
                  },
                  "paramError": {
                    "value": {
                      "message": [
                        "name should not be empty",
                        "description should not be empty"
                      ],
                      "error": "Bad Request"
                    },
                    "summary": "Param validation error"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "get": {
        "tags": ["Category"],
        "summary": "List categories",
        "description": "List all categories saved into the database.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List all created categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Category"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/specification": {
      "post": {
        "tags": ["Specification"],
        "summary": "Create new specification",
        "description": "Create a new specification into the server. This endpoint is exclusive for admins",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Body params to create specification object. All 2 params: name, and description are required",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/createCategory"
              },
              "example": {
                "name": "Electric Car",
                "description": "An electric car is a car which is propelled by one or more electric motors."
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created specification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Specification"
                }
              }
            }
          },
          "400": {
            "description": "Error while creating new specification",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/definitions/Error"
                    },
                    {
                      "$ref": "#/definitions/ErrorParam"
                    }
                  ]
                },
                "examples": {
                  "existentCategory": {
                    "value": {
                      "message": "Specification with name ${name} already exists",
                      "error": "Bad Request"
                    },
                    "summary": "Specification already exists"
                  },
                  "paramError": {
                    "value": {
                      "message": [
                        "name should not be empty",
                        "description should not be empty"
                      ],
                      "error": "Bad Request"
                    },
                    "summary": "Param validation error"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "get": {
        "tags": ["Specification"],
        "summary": "List specification",
        "description": "List all specification saved into the database.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List all created specification",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Specification"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "driver_license": {
            "type": "string"
          },
          "password": {
            "type": "string",
            "format": "password"
          },
          "avatar": {
            "type": "string",
            "nullable": true,
            "example": "my-avatar.jpeg"
          },
          "admin": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date",
            "example": "2021-04-17T13:46:15.615Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date",
            "example": "2021-04-17T13:46:15.615Z"
          }
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "example": "Sedan"
          },
          "description": {
            "type": "string",
            "example": "A sedan has four doors and a traditional trunk."
          },
          "created_at": {
            "type": "string",
            "format": "date",
            "example": "2021-04-17T13:46:15.615Z"
          }
        }
      },
      "Specification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "example": "Electric Engine."
          },
          "description": {
            "type": "string",
            "example": "An electric car is a car which is propelled by one or more electric motors."
          },
          "created_at": {
            "type": "string",
            "format": "date",
            "example": "2021-04-17T13:46:15.615Z"
          }
        }
      }
    },
    "requestBodies": {
      "createCategory": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Sedan"
          },
          "description": {
            "type": "string",
            "example": "A sedan has four doors and a traditional trunk."
          }
        }
      },
      "createUserBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john@email.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": ".aA1234567"
          },
          "driver_license": {
            "type": "string",
            "example": "312412341"
          }
        }
      }
    },
    "responses": {
      "Unauthorized": {
        "description": "Unauthorized, either missing the auth token or an invalid token",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "missingToken": {
                "value": {
                  "message": "JWT token is missing",
                  "error": "Unauthorized"
                },
                "summary": "JWT token not provided"
              },
              "invalidToken": {
                "value": {
                  "message": "Invalid JWT token",
                  "error": "Unauthorized"
                },
                "summary": "Invalid JWT token"
              }
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden, user needs to be an admin",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "example": {
              "message": "An admin is required for this operation",
              "error": "Forbidden"
            }
          }
        }
      },
      "UnauthorizedUser": {
        "description": "Unauthorized, no user found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "noUserFound": {
                "value": {
                  "message": "No user was found for the given id",
                  "error": "Unauthorized"
                },
                "summary": "No user found for the given id"
              }
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "example": {
              "message": "${error.message}",
              "error": "Internal Server Error"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "definitions": {
    "UserResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string",
          "example": "John Doe"
        },
        "email": {
          "type": "string",
          "format": "email",
          "example": "john@email.com"
        },
        "driver_license": {
          "type": "string",
          "example": "8456456"
        },
        "avatar": {
          "type": "string",
          "nullable": true,
          "example": null
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "error": {
          "type": "string"
        }
      }
    },
    "ErrorParam": {
      "type": "object",
      "properties": {
        "message": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "error": {
          "type": "string"
        }
      }
    }
  }
}
